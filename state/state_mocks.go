// Code generated by MockGen. DO NOT EDIT.
// Source: state.go

// Package state is a generated GoMock package.
package state

import (
	big "math/big"
	reflect "reflect"

	substate "github.com/Fantom-foundation/Substate"
	common "github.com/ethereum/go-ethereum/common"
	types "github.com/ethereum/go-ethereum/core/types"
	gomock "go.uber.org/mock/gomock"
)

// MockBasicStateDB is a mock of BasicStateDB interface.
type MockBasicStateDB struct {
	ctrl     *gomock.Controller
	recorder *MockBasicStateDBMockRecorder
}

// MockBasicStateDBMockRecorder is the mock recorder for MockBasicStateDB.
type MockBasicStateDBMockRecorder struct {
	mock *MockBasicStateDB
}

// NewMockBasicStateDB creates a new mock instance.
func NewMockBasicStateDB(ctrl *gomock.Controller) *MockBasicStateDB {
	mock := &MockBasicStateDB{ctrl: ctrl}
	mock.recorder = &MockBasicStateDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBasicStateDB) EXPECT() *MockBasicStateDBMockRecorder {
	return m.recorder
}

// AddAddressToAccessList mocks base method.
func (m *MockBasicStateDB) AddAddressToAccessList(addr common.Address) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddAddressToAccessList", addr)
}

// AddAddressToAccessList indicates an expected call of AddAddressToAccessList.
func (mr *MockBasicStateDBMockRecorder) AddAddressToAccessList(addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAddressToAccessList", reflect.TypeOf((*MockBasicStateDB)(nil).AddAddressToAccessList), addr)
}

// AddBalance mocks base method.
func (m *MockBasicStateDB) AddBalance(arg0 common.Address, arg1 *big.Int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddBalance", arg0, arg1)
}

// AddBalance indicates an expected call of AddBalance.
func (mr *MockBasicStateDBMockRecorder) AddBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBalance", reflect.TypeOf((*MockBasicStateDB)(nil).AddBalance), arg0, arg1)
}

// AddLog mocks base method.
func (m *MockBasicStateDB) AddLog(arg0 *types.Log) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddLog", arg0)
}

// AddLog indicates an expected call of AddLog.
func (mr *MockBasicStateDBMockRecorder) AddLog(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLog", reflect.TypeOf((*MockBasicStateDB)(nil).AddLog), arg0)
}

// AddRefund mocks base method.
func (m *MockBasicStateDB) AddRefund(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddRefund", arg0)
}

// AddRefund indicates an expected call of AddRefund.
func (mr *MockBasicStateDBMockRecorder) AddRefund(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRefund", reflect.TypeOf((*MockBasicStateDB)(nil).AddRefund), arg0)
}

// AddSlotToAccessList mocks base method.
func (m *MockBasicStateDB) AddSlotToAccessList(addr common.Address, slot common.Hash) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddSlotToAccessList", addr, slot)
}

// AddSlotToAccessList indicates an expected call of AddSlotToAccessList.
func (mr *MockBasicStateDBMockRecorder) AddSlotToAccessList(addr, slot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSlotToAccessList", reflect.TypeOf((*MockBasicStateDB)(nil).AddSlotToAccessList), addr, slot)
}

// AddressInAccessList mocks base method.
func (m *MockBasicStateDB) AddressInAccessList(addr common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddressInAccessList", addr)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AddressInAccessList indicates an expected call of AddressInAccessList.
func (mr *MockBasicStateDBMockRecorder) AddressInAccessList(addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddressInAccessList", reflect.TypeOf((*MockBasicStateDB)(nil).AddressInAccessList), addr)
}

// BeginBlock mocks base method.
func (m *MockBasicStateDB) BeginBlock(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BeginBlock", arg0)
}

// BeginBlock indicates an expected call of BeginBlock.
func (mr *MockBasicStateDBMockRecorder) BeginBlock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginBlock", reflect.TypeOf((*MockBasicStateDB)(nil).BeginBlock), arg0)
}

// BeginSyncPeriod mocks base method.
func (m *MockBasicStateDB) BeginSyncPeriod(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BeginSyncPeriod", arg0)
}

// BeginSyncPeriod indicates an expected call of BeginSyncPeriod.
func (mr *MockBasicStateDBMockRecorder) BeginSyncPeriod(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginSyncPeriod", reflect.TypeOf((*MockBasicStateDB)(nil).BeginSyncPeriod), arg0)
}

// BeginTransaction mocks base method.
func (m *MockBasicStateDB) BeginTransaction(arg0 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BeginTransaction", arg0)
}

// BeginTransaction indicates an expected call of BeginTransaction.
func (mr *MockBasicStateDBMockRecorder) BeginTransaction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTransaction", reflect.TypeOf((*MockBasicStateDB)(nil).BeginTransaction), arg0)
}

// CreateAccount mocks base method.
func (m *MockBasicStateDB) CreateAccount(arg0 common.Address) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateAccount", arg0)
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockBasicStateDBMockRecorder) CreateAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockBasicStateDB)(nil).CreateAccount), arg0)
}

// Empty mocks base method.
func (m *MockBasicStateDB) Empty(arg0 common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Empty", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Empty indicates an expected call of Empty.
func (mr *MockBasicStateDBMockRecorder) Empty(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Empty", reflect.TypeOf((*MockBasicStateDB)(nil).Empty), arg0)
}

// EndBlock mocks base method.
func (m *MockBasicStateDB) EndBlock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EndBlock")
}

// EndBlock indicates an expected call of EndBlock.
func (mr *MockBasicStateDBMockRecorder) EndBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndBlock", reflect.TypeOf((*MockBasicStateDB)(nil).EndBlock))
}

// EndSyncPeriod mocks base method.
func (m *MockBasicStateDB) EndSyncPeriod() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EndSyncPeriod")
}

// EndSyncPeriod indicates an expected call of EndSyncPeriod.
func (mr *MockBasicStateDBMockRecorder) EndSyncPeriod() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndSyncPeriod", reflect.TypeOf((*MockBasicStateDB)(nil).EndSyncPeriod))
}

// EndTransaction mocks base method.
func (m *MockBasicStateDB) EndTransaction() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EndTransaction")
}

// EndTransaction indicates an expected call of EndTransaction.
func (mr *MockBasicStateDBMockRecorder) EndTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndTransaction", reflect.TypeOf((*MockBasicStateDB)(nil).EndTransaction))
}

// Error mocks base method.
func (m *MockBasicStateDB) Error() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(error)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockBasicStateDBMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockBasicStateDB)(nil).Error))
}

// Exist mocks base method.
func (m *MockBasicStateDB) Exist(arg0 common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exist", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exist indicates an expected call of Exist.
func (mr *MockBasicStateDBMockRecorder) Exist(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exist", reflect.TypeOf((*MockBasicStateDB)(nil).Exist), arg0)
}

// GetBalance mocks base method.
func (m *MockBasicStateDB) GetBalance(arg0 common.Address) *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", arg0)
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockBasicStateDBMockRecorder) GetBalance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockBasicStateDB)(nil).GetBalance), arg0)
}

// GetCode mocks base method.
func (m *MockBasicStateDB) GetCode(arg0 common.Address) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCode", arg0)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetCode indicates an expected call of GetCode.
func (mr *MockBasicStateDBMockRecorder) GetCode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCode", reflect.TypeOf((*MockBasicStateDB)(nil).GetCode), arg0)
}

// GetCodeHash mocks base method.
func (m *MockBasicStateDB) GetCodeHash(arg0 common.Address) common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodeHash", arg0)
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// GetCodeHash indicates an expected call of GetCodeHash.
func (mr *MockBasicStateDBMockRecorder) GetCodeHash(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodeHash", reflect.TypeOf((*MockBasicStateDB)(nil).GetCodeHash), arg0)
}

// GetCodeSize mocks base method.
func (m *MockBasicStateDB) GetCodeSize(arg0 common.Address) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodeSize", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetCodeSize indicates an expected call of GetCodeSize.
func (mr *MockBasicStateDBMockRecorder) GetCodeSize(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodeSize", reflect.TypeOf((*MockBasicStateDB)(nil).GetCodeSize), arg0)
}

// GetCommittedState mocks base method.
func (m *MockBasicStateDB) GetCommittedState(arg0 common.Address, arg1 common.Hash) common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommittedState", arg0, arg1)
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// GetCommittedState indicates an expected call of GetCommittedState.
func (mr *MockBasicStateDBMockRecorder) GetCommittedState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommittedState", reflect.TypeOf((*MockBasicStateDB)(nil).GetCommittedState), arg0, arg1)
}

// GetLogs mocks base method.
func (m *MockBasicStateDB) GetLogs(arg0, arg1 common.Hash) []*types.Log {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogs", arg0, arg1)
	ret0, _ := ret[0].([]*types.Log)
	return ret0
}

// GetLogs indicates an expected call of GetLogs.
func (mr *MockBasicStateDBMockRecorder) GetLogs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogs", reflect.TypeOf((*MockBasicStateDB)(nil).GetLogs), arg0, arg1)
}

// GetNonce mocks base method.
func (m *MockBasicStateDB) GetNonce(arg0 common.Address) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNonce", arg0)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetNonce indicates an expected call of GetNonce.
func (mr *MockBasicStateDBMockRecorder) GetNonce(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNonce", reflect.TypeOf((*MockBasicStateDB)(nil).GetNonce), arg0)
}

// GetRefund mocks base method.
func (m *MockBasicStateDB) GetRefund() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefund")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetRefund indicates an expected call of GetRefund.
func (mr *MockBasicStateDBMockRecorder) GetRefund() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefund", reflect.TypeOf((*MockBasicStateDB)(nil).GetRefund))
}

// GetState mocks base method.
func (m *MockBasicStateDB) GetState(arg0 common.Address, arg1 common.Hash) common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState", arg0, arg1)
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// GetState indicates an expected call of GetState.
func (mr *MockBasicStateDBMockRecorder) GetState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockBasicStateDB)(nil).GetState), arg0, arg1)
}

// HasSuicided mocks base method.
func (m *MockBasicStateDB) HasSuicided(arg0 common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasSuicided", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasSuicided indicates an expected call of HasSuicided.
func (mr *MockBasicStateDBMockRecorder) HasSuicided(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasSuicided", reflect.TypeOf((*MockBasicStateDB)(nil).HasSuicided), arg0)
}

// PrepareAccessList mocks base method.
func (m *MockBasicStateDB) PrepareAccessList(sender common.Address, dest *common.Address, precompiles []common.Address, txAccesses types.AccessList) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PrepareAccessList", sender, dest, precompiles, txAccesses)
}

// PrepareAccessList indicates an expected call of PrepareAccessList.
func (mr *MockBasicStateDBMockRecorder) PrepareAccessList(sender, dest, precompiles, txAccesses interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareAccessList", reflect.TypeOf((*MockBasicStateDB)(nil).PrepareAccessList), sender, dest, precompiles, txAccesses)
}

// RevertToSnapshot mocks base method.
func (m *MockBasicStateDB) RevertToSnapshot(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RevertToSnapshot", arg0)
}

// RevertToSnapshot indicates an expected call of RevertToSnapshot.
func (mr *MockBasicStateDBMockRecorder) RevertToSnapshot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevertToSnapshot", reflect.TypeOf((*MockBasicStateDB)(nil).RevertToSnapshot), arg0)
}

// SetCode mocks base method.
func (m *MockBasicStateDB) SetCode(arg0 common.Address, arg1 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCode", arg0, arg1)
}

// SetCode indicates an expected call of SetCode.
func (mr *MockBasicStateDBMockRecorder) SetCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCode", reflect.TypeOf((*MockBasicStateDB)(nil).SetCode), arg0, arg1)
}

// SetNonce mocks base method.
func (m *MockBasicStateDB) SetNonce(arg0 common.Address, arg1 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetNonce", arg0, arg1)
}

// SetNonce indicates an expected call of SetNonce.
func (mr *MockBasicStateDBMockRecorder) SetNonce(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNonce", reflect.TypeOf((*MockBasicStateDB)(nil).SetNonce), arg0, arg1)
}

// SetState mocks base method.
func (m *MockBasicStateDB) SetState(arg0 common.Address, arg1, arg2 common.Hash) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetState", arg0, arg1, arg2)
}

// SetState indicates an expected call of SetState.
func (mr *MockBasicStateDBMockRecorder) SetState(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetState", reflect.TypeOf((*MockBasicStateDB)(nil).SetState), arg0, arg1, arg2)
}

// SlotInAccessList mocks base method.
func (m *MockBasicStateDB) SlotInAccessList(addr common.Address, slot common.Hash) (bool, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SlotInAccessList", addr, slot)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// SlotInAccessList indicates an expected call of SlotInAccessList.
func (mr *MockBasicStateDBMockRecorder) SlotInAccessList(addr, slot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SlotInAccessList", reflect.TypeOf((*MockBasicStateDB)(nil).SlotInAccessList), addr, slot)
}

// Snapshot mocks base method.
func (m *MockBasicStateDB) Snapshot() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Snapshot")
	ret0, _ := ret[0].(int)
	return ret0
}

// Snapshot indicates an expected call of Snapshot.
func (mr *MockBasicStateDBMockRecorder) Snapshot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshot", reflect.TypeOf((*MockBasicStateDB)(nil).Snapshot))
}

// SubBalance mocks base method.
func (m *MockBasicStateDB) SubBalance(arg0 common.Address, arg1 *big.Int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SubBalance", arg0, arg1)
}

// SubBalance indicates an expected call of SubBalance.
func (mr *MockBasicStateDBMockRecorder) SubBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubBalance", reflect.TypeOf((*MockBasicStateDB)(nil).SubBalance), arg0, arg1)
}

// SubRefund mocks base method.
func (m *MockBasicStateDB) SubRefund(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SubRefund", arg0)
}

// SubRefund indicates an expected call of SubRefund.
func (mr *MockBasicStateDBMockRecorder) SubRefund(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubRefund", reflect.TypeOf((*MockBasicStateDB)(nil).SubRefund), arg0)
}

// Suicide mocks base method.
func (m *MockBasicStateDB) Suicide(arg0 common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Suicide", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Suicide indicates an expected call of Suicide.
func (mr *MockBasicStateDBMockRecorder) Suicide(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Suicide", reflect.TypeOf((*MockBasicStateDB)(nil).Suicide), arg0)
}

// MockStateDB is a mock of StateDB interface.
type MockStateDB struct {
	ctrl     *gomock.Controller
	recorder *MockStateDBMockRecorder
}

// MockStateDBMockRecorder is the mock recorder for MockStateDB.
type MockStateDBMockRecorder struct {
	mock *MockStateDB
}

// NewMockStateDB creates a new mock instance.
func NewMockStateDB(ctrl *gomock.Controller) *MockStateDB {
	mock := &MockStateDB{ctrl: ctrl}
	mock.recorder = &MockStateDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStateDB) EXPECT() *MockStateDBMockRecorder {
	return m.recorder
}

// AddAddressToAccessList mocks base method.
func (m *MockStateDB) AddAddressToAccessList(addr common.Address) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddAddressToAccessList", addr)
}

// AddAddressToAccessList indicates an expected call of AddAddressToAccessList.
func (mr *MockStateDBMockRecorder) AddAddressToAccessList(addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAddressToAccessList", reflect.TypeOf((*MockStateDB)(nil).AddAddressToAccessList), addr)
}

// AddBalance mocks base method.
func (m *MockStateDB) AddBalance(arg0 common.Address, arg1 *big.Int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddBalance", arg0, arg1)
}

// AddBalance indicates an expected call of AddBalance.
func (mr *MockStateDBMockRecorder) AddBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBalance", reflect.TypeOf((*MockStateDB)(nil).AddBalance), arg0, arg1)
}

// AddLog mocks base method.
func (m *MockStateDB) AddLog(arg0 *types.Log) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddLog", arg0)
}

// AddLog indicates an expected call of AddLog.
func (mr *MockStateDBMockRecorder) AddLog(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLog", reflect.TypeOf((*MockStateDB)(nil).AddLog), arg0)
}

// AddPreimage mocks base method.
func (m *MockStateDB) AddPreimage(arg0 common.Hash, arg1 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddPreimage", arg0, arg1)
}

// AddPreimage indicates an expected call of AddPreimage.
func (mr *MockStateDBMockRecorder) AddPreimage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPreimage", reflect.TypeOf((*MockStateDB)(nil).AddPreimage), arg0, arg1)
}

// AddRefund mocks base method.
func (m *MockStateDB) AddRefund(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddRefund", arg0)
}

// AddRefund indicates an expected call of AddRefund.
func (mr *MockStateDBMockRecorder) AddRefund(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRefund", reflect.TypeOf((*MockStateDB)(nil).AddRefund), arg0)
}

// AddSlotToAccessList mocks base method.
func (m *MockStateDB) AddSlotToAccessList(addr common.Address, slot common.Hash) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddSlotToAccessList", addr, slot)
}

// AddSlotToAccessList indicates an expected call of AddSlotToAccessList.
func (mr *MockStateDBMockRecorder) AddSlotToAccessList(addr, slot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSlotToAccessList", reflect.TypeOf((*MockStateDB)(nil).AddSlotToAccessList), addr, slot)
}

// AddressInAccessList mocks base method.
func (m *MockStateDB) AddressInAccessList(addr common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddressInAccessList", addr)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AddressInAccessList indicates an expected call of AddressInAccessList.
func (mr *MockStateDBMockRecorder) AddressInAccessList(addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddressInAccessList", reflect.TypeOf((*MockStateDB)(nil).AddressInAccessList), addr)
}

// BeginBlock mocks base method.
func (m *MockStateDB) BeginBlock(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BeginBlock", arg0)
}

// BeginBlock indicates an expected call of BeginBlock.
func (mr *MockStateDBMockRecorder) BeginBlock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginBlock", reflect.TypeOf((*MockStateDB)(nil).BeginBlock), arg0)
}

// BeginSyncPeriod mocks base method.
func (m *MockStateDB) BeginSyncPeriod(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BeginSyncPeriod", arg0)
}

// BeginSyncPeriod indicates an expected call of BeginSyncPeriod.
func (mr *MockStateDBMockRecorder) BeginSyncPeriod(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginSyncPeriod", reflect.TypeOf((*MockStateDB)(nil).BeginSyncPeriod), arg0)
}

// BeginTransaction mocks base method.
func (m *MockStateDB) BeginTransaction(arg0 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BeginTransaction", arg0)
}

// BeginTransaction indicates an expected call of BeginTransaction.
func (mr *MockStateDBMockRecorder) BeginTransaction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTransaction", reflect.TypeOf((*MockStateDB)(nil).BeginTransaction), arg0)
}

// Close mocks base method.
func (m *MockStateDB) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStateDBMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStateDB)(nil).Close))
}

// Commit mocks base method.
func (m *MockStateDB) Commit(arg0 bool) (common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", arg0)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Commit indicates an expected call of Commit.
func (mr *MockStateDBMockRecorder) Commit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockStateDB)(nil).Commit), arg0)
}

// CreateAccount mocks base method.
func (m *MockStateDB) CreateAccount(arg0 common.Address) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateAccount", arg0)
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockStateDBMockRecorder) CreateAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockStateDB)(nil).CreateAccount), arg0)
}

// Empty mocks base method.
func (m *MockStateDB) Empty(arg0 common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Empty", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Empty indicates an expected call of Empty.
func (mr *MockStateDBMockRecorder) Empty(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Empty", reflect.TypeOf((*MockStateDB)(nil).Empty), arg0)
}

// EndBlock mocks base method.
func (m *MockStateDB) EndBlock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EndBlock")
}

// EndBlock indicates an expected call of EndBlock.
func (mr *MockStateDBMockRecorder) EndBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndBlock", reflect.TypeOf((*MockStateDB)(nil).EndBlock))
}

// EndSyncPeriod mocks base method.
func (m *MockStateDB) EndSyncPeriod() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EndSyncPeriod")
}

// EndSyncPeriod indicates an expected call of EndSyncPeriod.
func (mr *MockStateDBMockRecorder) EndSyncPeriod() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndSyncPeriod", reflect.TypeOf((*MockStateDB)(nil).EndSyncPeriod))
}

// EndTransaction mocks base method.
func (m *MockStateDB) EndTransaction() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EndTransaction")
}

// EndTransaction indicates an expected call of EndTransaction.
func (mr *MockStateDBMockRecorder) EndTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndTransaction", reflect.TypeOf((*MockStateDB)(nil).EndTransaction))
}

// Error mocks base method.
func (m *MockStateDB) Error() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(error)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockStateDBMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockStateDB)(nil).Error))
}

// Exist mocks base method.
func (m *MockStateDB) Exist(arg0 common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exist", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exist indicates an expected call of Exist.
func (mr *MockStateDBMockRecorder) Exist(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exist", reflect.TypeOf((*MockStateDB)(nil).Exist), arg0)
}

// Finalise mocks base method.
func (m *MockStateDB) Finalise(arg0 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Finalise", arg0)
}

// Finalise indicates an expected call of Finalise.
func (mr *MockStateDBMockRecorder) Finalise(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finalise", reflect.TypeOf((*MockStateDB)(nil).Finalise), arg0)
}

// ForEachStorage mocks base method.
func (m *MockStateDB) ForEachStorage(arg0 common.Address, arg1 func(common.Hash, common.Hash) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForEachStorage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForEachStorage indicates an expected call of ForEachStorage.
func (mr *MockStateDBMockRecorder) ForEachStorage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForEachStorage", reflect.TypeOf((*MockStateDB)(nil).ForEachStorage), arg0, arg1)
}

// GetArchiveState mocks base method.
func (m *MockStateDB) GetArchiveState(block uint64) (StateDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArchiveState", block)
	ret0, _ := ret[0].(StateDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArchiveState indicates an expected call of GetArchiveState.
func (mr *MockStateDBMockRecorder) GetArchiveState(block interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArchiveState", reflect.TypeOf((*MockStateDB)(nil).GetArchiveState), block)
}

// GetBalance mocks base method.
func (m *MockStateDB) GetBalance(arg0 common.Address) *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", arg0)
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockStateDBMockRecorder) GetBalance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockStateDB)(nil).GetBalance), arg0)
}

// GetCode mocks base method.
func (m *MockStateDB) GetCode(arg0 common.Address) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCode", arg0)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetCode indicates an expected call of GetCode.
func (mr *MockStateDBMockRecorder) GetCode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCode", reflect.TypeOf((*MockStateDB)(nil).GetCode), arg0)
}

// GetCodeHash mocks base method.
func (m *MockStateDB) GetCodeHash(arg0 common.Address) common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodeHash", arg0)
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// GetCodeHash indicates an expected call of GetCodeHash.
func (mr *MockStateDBMockRecorder) GetCodeHash(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodeHash", reflect.TypeOf((*MockStateDB)(nil).GetCodeHash), arg0)
}

// GetCodeSize mocks base method.
func (m *MockStateDB) GetCodeSize(arg0 common.Address) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodeSize", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetCodeSize indicates an expected call of GetCodeSize.
func (mr *MockStateDBMockRecorder) GetCodeSize(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodeSize", reflect.TypeOf((*MockStateDB)(nil).GetCodeSize), arg0)
}

// GetCommittedState mocks base method.
func (m *MockStateDB) GetCommittedState(arg0 common.Address, arg1 common.Hash) common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommittedState", arg0, arg1)
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// GetCommittedState indicates an expected call of GetCommittedState.
func (mr *MockStateDBMockRecorder) GetCommittedState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommittedState", reflect.TypeOf((*MockStateDB)(nil).GetCommittedState), arg0, arg1)
}

// GetLogs mocks base method.
func (m *MockStateDB) GetLogs(arg0, arg1 common.Hash) []*types.Log {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogs", arg0, arg1)
	ret0, _ := ret[0].([]*types.Log)
	return ret0
}

// GetLogs indicates an expected call of GetLogs.
func (mr *MockStateDBMockRecorder) GetLogs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogs", reflect.TypeOf((*MockStateDB)(nil).GetLogs), arg0, arg1)
}

// GetMemoryUsage mocks base method.
func (m *MockStateDB) GetMemoryUsage() *MemoryUsage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemoryUsage")
	ret0, _ := ret[0].(*MemoryUsage)
	return ret0
}

// GetMemoryUsage indicates an expected call of GetMemoryUsage.
func (mr *MockStateDBMockRecorder) GetMemoryUsage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemoryUsage", reflect.TypeOf((*MockStateDB)(nil).GetMemoryUsage))
}

// GetNonce mocks base method.
func (m *MockStateDB) GetNonce(arg0 common.Address) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNonce", arg0)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetNonce indicates an expected call of GetNonce.
func (mr *MockStateDBMockRecorder) GetNonce(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNonce", reflect.TypeOf((*MockStateDB)(nil).GetNonce), arg0)
}

// GetRefund mocks base method.
func (m *MockStateDB) GetRefund() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefund")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetRefund indicates an expected call of GetRefund.
func (mr *MockStateDBMockRecorder) GetRefund() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefund", reflect.TypeOf((*MockStateDB)(nil).GetRefund))
}

// GetShadowDB mocks base method.
func (m *MockStateDB) GetShadowDB() StateDB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShadowDB")
	ret0, _ := ret[0].(StateDB)
	return ret0
}

// GetShadowDB indicates an expected call of GetShadowDB.
func (mr *MockStateDBMockRecorder) GetShadowDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShadowDB", reflect.TypeOf((*MockStateDB)(nil).GetShadowDB))
}

// GetState mocks base method.
func (m *MockStateDB) GetState(arg0 common.Address, arg1 common.Hash) common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState", arg0, arg1)
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// GetState indicates an expected call of GetState.
func (mr *MockStateDBMockRecorder) GetState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockStateDB)(nil).GetState), arg0, arg1)
}

// GetSubstatePostAlloc mocks base method.
func (m *MockStateDB) GetSubstatePostAlloc() substate.SubstateAlloc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubstatePostAlloc")
	ret0, _ := ret[0].(substate.SubstateAlloc)
	return ret0
}

// GetSubstatePostAlloc indicates an expected call of GetSubstatePostAlloc.
func (mr *MockStateDBMockRecorder) GetSubstatePostAlloc() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubstatePostAlloc", reflect.TypeOf((*MockStateDB)(nil).GetSubstatePostAlloc))
}

// HasSuicided mocks base method.
func (m *MockStateDB) HasSuicided(arg0 common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasSuicided", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasSuicided indicates an expected call of HasSuicided.
func (mr *MockStateDBMockRecorder) HasSuicided(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasSuicided", reflect.TypeOf((*MockStateDB)(nil).HasSuicided), arg0)
}

// IntermediateRoot mocks base method.
func (m *MockStateDB) IntermediateRoot(arg0 bool) common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IntermediateRoot", arg0)
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// IntermediateRoot indicates an expected call of IntermediateRoot.
func (mr *MockStateDBMockRecorder) IntermediateRoot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IntermediateRoot", reflect.TypeOf((*MockStateDB)(nil).IntermediateRoot), arg0)
}

// Prepare mocks base method.
func (m *MockStateDB) Prepare(arg0 common.Hash, arg1 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Prepare", arg0, arg1)
}

// Prepare indicates an expected call of Prepare.
func (mr *MockStateDBMockRecorder) Prepare(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prepare", reflect.TypeOf((*MockStateDB)(nil).Prepare), arg0, arg1)
}

// PrepareAccessList mocks base method.
func (m *MockStateDB) PrepareAccessList(sender common.Address, dest *common.Address, precompiles []common.Address, txAccesses types.AccessList) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PrepareAccessList", sender, dest, precompiles, txAccesses)
}

// PrepareAccessList indicates an expected call of PrepareAccessList.
func (mr *MockStateDBMockRecorder) PrepareAccessList(sender, dest, precompiles, txAccesses interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareAccessList", reflect.TypeOf((*MockStateDB)(nil).PrepareAccessList), sender, dest, precompiles, txAccesses)
}

// PrepareSubstate mocks base method.
func (m *MockStateDB) PrepareSubstate(arg0 *substate.SubstateAlloc, arg1 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PrepareSubstate", arg0, arg1)
}

// PrepareSubstate indicates an expected call of PrepareSubstate.
func (mr *MockStateDBMockRecorder) PrepareSubstate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareSubstate", reflect.TypeOf((*MockStateDB)(nil).PrepareSubstate), arg0, arg1)
}

// RevertToSnapshot mocks base method.
func (m *MockStateDB) RevertToSnapshot(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RevertToSnapshot", arg0)
}

// RevertToSnapshot indicates an expected call of RevertToSnapshot.
func (mr *MockStateDBMockRecorder) RevertToSnapshot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevertToSnapshot", reflect.TypeOf((*MockStateDB)(nil).RevertToSnapshot), arg0)
}

// SetCode mocks base method.
func (m *MockStateDB) SetCode(arg0 common.Address, arg1 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCode", arg0, arg1)
}

// SetCode indicates an expected call of SetCode.
func (mr *MockStateDBMockRecorder) SetCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCode", reflect.TypeOf((*MockStateDB)(nil).SetCode), arg0, arg1)
}

// SetNonce mocks base method.
func (m *MockStateDB) SetNonce(arg0 common.Address, arg1 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetNonce", arg0, arg1)
}

// SetNonce indicates an expected call of SetNonce.
func (mr *MockStateDBMockRecorder) SetNonce(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNonce", reflect.TypeOf((*MockStateDB)(nil).SetNonce), arg0, arg1)
}

// SetState mocks base method.
func (m *MockStateDB) SetState(arg0 common.Address, arg1, arg2 common.Hash) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetState", arg0, arg1, arg2)
}

// SetState indicates an expected call of SetState.
func (mr *MockStateDBMockRecorder) SetState(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetState", reflect.TypeOf((*MockStateDB)(nil).SetState), arg0, arg1, arg2)
}

// SlotInAccessList mocks base method.
func (m *MockStateDB) SlotInAccessList(addr common.Address, slot common.Hash) (bool, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SlotInAccessList", addr, slot)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// SlotInAccessList indicates an expected call of SlotInAccessList.
func (mr *MockStateDBMockRecorder) SlotInAccessList(addr, slot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SlotInAccessList", reflect.TypeOf((*MockStateDB)(nil).SlotInAccessList), addr, slot)
}

// Snapshot mocks base method.
func (m *MockStateDB) Snapshot() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Snapshot")
	ret0, _ := ret[0].(int)
	return ret0
}

// Snapshot indicates an expected call of Snapshot.
func (mr *MockStateDBMockRecorder) Snapshot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshot", reflect.TypeOf((*MockStateDB)(nil).Snapshot))
}

// StartBulkLoad mocks base method.
func (m *MockStateDB) StartBulkLoad(block uint64) BulkLoad {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartBulkLoad", block)
	ret0, _ := ret[0].(BulkLoad)
	return ret0
}

// StartBulkLoad indicates an expected call of StartBulkLoad.
func (mr *MockStateDBMockRecorder) StartBulkLoad(block interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartBulkLoad", reflect.TypeOf((*MockStateDB)(nil).StartBulkLoad), block)
}

// SubBalance mocks base method.
func (m *MockStateDB) SubBalance(arg0 common.Address, arg1 *big.Int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SubBalance", arg0, arg1)
}

// SubBalance indicates an expected call of SubBalance.
func (mr *MockStateDBMockRecorder) SubBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubBalance", reflect.TypeOf((*MockStateDB)(nil).SubBalance), arg0, arg1)
}

// SubRefund mocks base method.
func (m *MockStateDB) SubRefund(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SubRefund", arg0)
}

// SubRefund indicates an expected call of SubRefund.
func (mr *MockStateDBMockRecorder) SubRefund(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubRefund", reflect.TypeOf((*MockStateDB)(nil).SubRefund), arg0)
}

// Suicide mocks base method.
func (m *MockStateDB) Suicide(arg0 common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Suicide", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Suicide indicates an expected call of Suicide.
func (mr *MockStateDBMockRecorder) Suicide(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Suicide", reflect.TypeOf((*MockStateDB)(nil).Suicide), arg0)
}

// MockBulkLoad is a mock of BulkLoad interface.
type MockBulkLoad struct {
	ctrl     *gomock.Controller
	recorder *MockBulkLoadMockRecorder
}

// MockBulkLoadMockRecorder is the mock recorder for MockBulkLoad.
type MockBulkLoadMockRecorder struct {
	mock *MockBulkLoad
}

// NewMockBulkLoad creates a new mock instance.
func NewMockBulkLoad(ctrl *gomock.Controller) *MockBulkLoad {
	mock := &MockBulkLoad{ctrl: ctrl}
	mock.recorder = &MockBulkLoadMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBulkLoad) EXPECT() *MockBulkLoadMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockBulkLoad) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockBulkLoadMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockBulkLoad)(nil).Close))
}

// CreateAccount mocks base method.
func (m *MockBulkLoad) CreateAccount(arg0 common.Address) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateAccount", arg0)
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockBulkLoadMockRecorder) CreateAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockBulkLoad)(nil).CreateAccount), arg0)
}

// SetBalance mocks base method.
func (m *MockBulkLoad) SetBalance(arg0 common.Address, arg1 *big.Int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBalance", arg0, arg1)
}

// SetBalance indicates an expected call of SetBalance.
func (mr *MockBulkLoadMockRecorder) SetBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBalance", reflect.TypeOf((*MockBulkLoad)(nil).SetBalance), arg0, arg1)
}

// SetCode mocks base method.
func (m *MockBulkLoad) SetCode(arg0 common.Address, arg1 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCode", arg0, arg1)
}

// SetCode indicates an expected call of SetCode.
func (mr *MockBulkLoadMockRecorder) SetCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCode", reflect.TypeOf((*MockBulkLoad)(nil).SetCode), arg0, arg1)
}

// SetNonce mocks base method.
func (m *MockBulkLoad) SetNonce(arg0 common.Address, arg1 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetNonce", arg0, arg1)
}

// SetNonce indicates an expected call of SetNonce.
func (mr *MockBulkLoadMockRecorder) SetNonce(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNonce", reflect.TypeOf((*MockBulkLoad)(nil).SetNonce), arg0, arg1)
}

// SetState mocks base method.
func (m *MockBulkLoad) SetState(arg0 common.Address, arg1, arg2 common.Hash) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetState", arg0, arg1, arg2)
}

// SetState indicates an expected call of SetState.
func (mr *MockBulkLoadMockRecorder) SetState(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetState", reflect.TypeOf((*MockBulkLoad)(nil).SetState), arg0, arg1, arg2)
}
