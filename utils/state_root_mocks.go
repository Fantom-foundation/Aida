// Code generated by MockGen. DO NOT EDIT.
// Source: state_root.go

// Package utils is a generated GoMock package.
package utils

import (
	reflect "reflect"

	common "github.com/ethereum/go-ethereum/common"
	gomock "go.uber.org/mock/gomock"
)

// MockStateHashProvider is a mock of StateHashProvider interface.
type MockStateHashProvider struct {
	ctrl     *gomock.Controller
	recorder *MockStateHashProviderMockRecorder
}

// MockStateHashProviderMockRecorder is the mock recorder for MockStateHashProvider.
type MockStateHashProviderMockRecorder struct {
	mock *MockStateHashProvider
}

// NewMockStateHashProvider creates a new mock instance.
func NewMockStateHashProvider(ctrl *gomock.Controller) *MockStateHashProvider {
	mock := &MockStateHashProvider{ctrl: ctrl}
	mock.recorder = &MockStateHashProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStateHashProvider) EXPECT() *MockStateHashProviderMockRecorder {
	return m.recorder
}

// DeletePreLoadedStateHash mocks base method.
func (m *MockStateHashProvider) DeletePreLoadedStateHash(number int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeletePreLoadedStateHash", number)
}

// DeletePreLoadedStateHash indicates an expected call of DeletePreLoadedStateHash.
func (mr *MockStateHashProviderMockRecorder) DeletePreLoadedStateHash(number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePreLoadedStateHash", reflect.TypeOf((*MockStateHashProvider)(nil).DeletePreLoadedStateHash), number)
}

// GetStateHash mocks base method.
func (m *MockStateHashProvider) GetStateHash(number int) common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStateHash", number)
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// GetStateHash indicates an expected call of GetStateHash.
func (mr *MockStateHashProviderMockRecorder) GetStateHash(number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStateHash", reflect.TypeOf((*MockStateHashProvider)(nil).GetStateHash), number)
}

// LoadStateHashFromDb mocks base method.
func (m *MockStateHashProvider) LoadStateHashFromDb(number int) (common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadStateHashFromDb", number)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadStateHashFromDb indicates an expected call of LoadStateHashFromDb.
func (mr *MockStateHashProviderMockRecorder) LoadStateHashFromDb(number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadStateHashFromDb", reflect.TypeOf((*MockStateHashProvider)(nil).LoadStateHashFromDb), number)
}

// PreLoadStateHashes mocks base method.
func (m *MockStateHashProvider) PreLoadStateHashes(first, last int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreLoadStateHashes", first, last)
	ret0, _ := ret[0].(error)
	return ret0
}

// PreLoadStateHashes indicates an expected call of PreLoadStateHashes.
func (mr *MockStateHashProviderMockRecorder) PreLoadStateHashes(first, last interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreLoadStateHashes", reflect.TypeOf((*MockStateHashProvider)(nil).PreLoadStateHashes), first, last)
}
