// Copyright 2024 Fantom Foundation
// This file is part of Aida Testing Infrastructure for Sonic
//
// Aida is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Aida is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Aida. If not, see <http://www.gnu.org/licenses/>.

// Code generated by MockGen. DO NOT EDIT.
// Source: state_hash.go
//
// Generated by this command:
//
//	mockgen -source state_hash.go -destination state_hash_mocks.go -package utils
//
// Package utils is a generated GoMock package.
package utils

import (
	reflect "reflect"

	common "github.com/ethereum/go-ethereum/common"
	gomock "go.uber.org/mock/gomock"
)

// MockStateHashProvider is a mock of StateHashProvider interface.
type MockStateHashProvider struct {
	ctrl     *gomock.Controller
	recorder *MockStateHashProviderMockRecorder
}

// MockStateHashProviderMockRecorder is the mock recorder for MockStateHashProvider.
type MockStateHashProviderMockRecorder struct {
	mock *MockStateHashProvider
}

// NewMockStateHashProvider creates a new mock instance.
func NewMockStateHashProvider(ctrl *gomock.Controller) *MockStateHashProvider {
	mock := &MockStateHashProvider{ctrl: ctrl}
	mock.recorder = &MockStateHashProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStateHashProvider) EXPECT() *MockStateHashProviderMockRecorder {
	return m.recorder
}

// GetStateHash mocks base method.
func (m *MockStateHashProvider) GetStateHash(blockNumber int) (common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStateHash", blockNumber)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStateHash indicates an expected call of GetStateHash.
func (mr *MockStateHashProviderMockRecorder) GetStateHash(blockNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStateHash", reflect.TypeOf((*MockStateHashProvider)(nil).GetStateHash), blockNumber)
}
