package apireplay

import (
	"encoding/json"
	"errors"
	"math/big"
	"strings"
	"testing"

	"github.com/Fantom-foundation/Aida/iterator"
	"github.com/ethereum/go-ethereum/common/hexutil"
	"github.com/status-im/keycard-go/hexutils"
)

const (
	hexOne  = "0x1"
	hexZero = "0x0"

	// 32 bytes returned by EVM as result one
	longHexOne = "0x0000000000000000000000000000000000000000000000000000000000000001"

	// 32 bytes returned by EVM as a zero result
	longHexZero = "0x0000000000000000000000000000000000000000000000000000000000000000"

	benchmarkHex = "0x6080604052600436106101c25760003560e01c80634def1c82116100f75780638705fcd411610095578063a7fa806b11610064578063a7fa806b146104d3578063d1abb907146104e8578063d2423b5114610508578063e30c397814610529576101c2565b80638705fcd4146104505780638da5cb5b146104705780638dbdbe6d1461048557806393f1a40b146104a5576101c2565b806351eb05a6116100d157806351eb05a6146103ce578063630b5ba1146103fb57806378ed5d1f146104105780637c516e9414610430576101c2565b80634def1c821461038f5780634e71e0c8146103a45780634f7b4a5a146103b9576101c2565b806317caf6f1116101645780631ab06ee51161013e5780631ab06ee51461030d5780632b8bbbe81461032d5780632f940c701461034d578063412753581461036d576101c2565b806317caf6f1146102b857806318fccc76146102cd57806319983251146102ed576101c2565b80630ad58d2f116101a05780630ad58d2f1461023457806314b9302e146102545780631526fe27146102695780631778809f14610298576101c2565b80630209914c146101c7578063078dfbe7146101e9578063081e3eda14610209575b600080fd5b3480156101d357600080fd5b506101e76101e2366004611bf7565b61053e565b005b3480156101f557600080fd5b506101e76102043660046119fa565b6105b1565b34801561021557600080fd5b5061021e610697565b60405161022b919061212f565b60405180910390f35b34801561024057600080fd5b506101e761024f366004611c77565b61069d565b34801561026057600080fd5b5061021e610791565b34801561027557600080fd5b50610289610284366004611bf7565b610797565b60405161022b93929190612146565b3480156102a457600080fd5b5061021e6102b3366004611c27565b6107c7565b3480156102c457600080fd5b5061021e610999565b3480156102d957600080fd5b506101e76102e8366004611c27565b61099f565b3480156102f957600080fd5b506101e7610308366004611bf7565b610a79565b34801561031957600080fd5b506101e7610328366004611c56565b610b60565b34801561033957600080fd5b506101e7610348366004611c27565b610c2c565b34801561035957600080fd5b506101e7610368366004611c27565b610d9b565b34801561037957600080fd5b50610382610e2d565b60405161022b9190611cfc565b34801561039b57600080fd5b5061021e610e3c565b3480156103b057600080fd5b506101e7610e42565b3480156103c557600080fd5b5061021e610ecf565b3480156103da57600080fd5b506103ee6103e9366004611bf7565b610ed5565b60405161022b919061210e565b34801561040757600080fd5b506101e76110c0565b34801561041c57600080fd5b5061038261042b366004611bf7565b6110e4565b34801561043c57600080fd5b506101e761044b366004611ad5565b61110b565b34801561045c57600080fd5b506101e761046b3660046119de565b61117f565b34801561047c57600080fd5b506103826111cb565b34801561049157600080fd5b506101e76104a0366004611c77565b6111da565b3480156104b157600080fd5b506104c56104c0366004611c27565b6112c7565b60405161022b929190612138565b3480156104df57600080fd5b506103826112eb565b3480156104f457600080fd5b506101e7610503366004611c77565b6112fa565b61051b610516366004611a44565b611469565b60405161022b929190611d8e565b34801561053557600080fd5b506103826115fb565b6000546001600160a01b031633146105715760405162461bcd60e51b815260040161056890611ff4565b60405180910390fd5b60078190556040517f7568c47990b247c5a649345ca09dffb8921c05e67212cd5f59e069ecc98c85d3906105a690839061212f565b60405180910390a150565b6000546001600160a01b031633146105db5760405162461bcd60e51b815260040161056890611ff4565b8115610676576001600160a01b0383161515806105f55750805b6106115760405162461bcd60e51b815260040161056890611f16565b600080546040516001600160a01b03808716939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0385166001600160a01b031991821617909155600180549091169055610692565b600180546001600160a01b0319166001600160a01b0385161790555b505050565b60035490565b6106a56119bd565b6106ae84610ed5565b600085815260056020908152604080832033845290915290208151919250906106f79064e8d4a51000906106e390879061160a565b816106ea57fe5b600184015491900461164d565b600182015580546107089085611693565b816000018190555061073e83856004888154811061072257fe5b6000918252602090912001546001600160a01b031691906116bb565b826001600160a01b031685336001600160a01b03167f8166bf25f8a2b7ed3c85049207da4358d16edbed977d23fa2ee6f0dde3ec213287604051610782919061212f565b60405180910390a45050505050565b60095481565b600381815481106107a457fe5b600091825260209091206003909102018054600182015460029092015490925083565b60006107d16119bd565b600384815481106107de57fe5b60009182526020808320604080516060810182526003909402909101805484526001810154848401526002015483820152878452600582528084206001600160a01b03881685529091528220815160048054939550919390929091908890811061084457fe5b6000918252602090912001546040516370a0823160e01b81526001600160a01b03909116906370a082319061087d903090600401611cfc565b60206040518083038186803b15801561089557600080fd5b505afa1580156108a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108cd9190611c0f565b90508360200151421180156108e157508015155b1561095b5760006108ff85602001514261169390919063ffffffff16565b9050600060065461092987604001516109236007548661160a90919063ffffffff16565b9061160a565b8161093057fe5b049050610956836109468364e8d4a5100061160a565b8161094d57fe5b869190046117a9565b935050505b6001830154835461098e916109899164e8d4a510009061097b908761160a565b8161098257fe5b049061164d565b6117ce565b979650505050505050565b60065481565b6109a76119bd565b6109b083610ed5565b6000848152600560209081526040808320338452909152812082518154939450909264e8d4a51000916109e3919061160a565b816109ea57fe5b0490506000610a0961098984600101548461164d90919063ffffffff16565b6001840183905590508015610a2f57600254610a2f906001600160a01b031686836116bb565b85336001600160a01b03167f71bab65ced2e5750775a0613be067df48ef06cf92a496ebf7663ae066092495483604051610a69919061212f565b60405180910390a3505050505050565b6000546001600160a01b03163314610aa35760405162461bcd60e51b815260040161056890611ff4565b600080600a54118015610ab75750600a5442105b15610ae057600a54600090610acc9042611693565b600754909150610adc908261160a565b9150505b610aea82826117a9565b91506000610b03600954846117f490919063ffffffff16565b6007819055600954909150610b199042906117a9565b600a55610b246110c0565b7f7568c47990b247c5a649345ca09dffb8921c05e67212cd5f59e069ecc98c85d381604051610b53919061212f565b60405180910390a1505050565b6000546001600160a01b03163314610b8a5760405162461bcd60e51b815260040161056890611ff4565b610bc781610bc160038581548110610b9e57fe5b90600052602060002090600302016002015460065461169390919063ffffffff16565b906117a9565b6006819055508060038381548110610bdb57fe5b906000526020600020906003020160020181905550817f942cc7e17a17c164bd977f32ab8c54265d5b9d481e4e352bf874f1e568874e7c82604051610c20919061212f565b60405180910390a25050565b6000546001600160a01b03163314610c565760405162461bcd60e51b815260040161056890611ff4565b600654610c6390836117a9565b60065560048054600181810183557f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b90910180546001600160a01b0385166001600160a01b031990911681179091556040805160608101825260008082524260208301908152928201888152600380548088018255928190529251919092027fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b81019190915591517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85c830155517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85d909101559154610d6091611693565b7f4710feb78e3bce8d2e3ca2989a8eb2f8bcd32a6a55b4535942c180fc4d2e295284604051610d8f919061212f565b60405180910390a35050565b600082815260056020908152604080832033845290915281208054828255600182019290925560048054919291610ddb9185918491908890811061072257fe5b826001600160a01b031684336001600160a01b03167f2cac5e20e1541d836381527a43f651851e302817b71dc8e810284e69210c1c6b84604051610e1f919061212f565b60405180910390a450505050565b6008546001600160a01b031681565b600a5481565b6001546001600160a01b0316338114610e6d5760405162461bcd60e51b815260040161056890612029565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b039092166001600160a01b0319928316179055600180549091169055565b60075481565b610edd6119bd565b60038281548110610eea57fe5b6000918252602091829020604080516060810182526003909302909101805483526001810154938301849052600201549082015291504211156110bb57600060048381548110610f3657fe5b6000918252602090912001546040516370a0823160e01b81526001600160a01b03909116906370a0823190610f6f903090600401611cfc565b60206040518083038186803b158015610f8757600080fd5b505afa158015610f9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fbf9190611c0f565b90508015611037576000610fe083602001514261169390919063ffffffff16565b9050600060065461100485604001516109236007548661160a90919063ffffffff16565b8161100b57fe5b04905061103261102a846110248464e8d4a5100061160a565b906117f4565b8551906117a9565b845250505b426020830152600380548391908590811061104e57fe5b600091825260209182902083516003909202019081558282015160018201556040928301516002909101558301518351915185927fcb7325664a4a3b7c7223eefc492a97ca4fdf94d46884621e5a8fae5a04b2b9d2926110b19290918691612146565b60405180910390a2505b919050565b60035460005b818110156110e0576110d781610ed5565b506001016110c6565b5050565b600481815481106110f157fe5b6000918252602090912001546001600160a01b0316905081565b60405163d505accf60e01b81526001600160a01b0389169063d505accf90611143908a908a908a908a908a908a908a90600401611d34565b600060405180830381600087803b15801561115d57600080fd5b505af1158015611171573d6000803e3d6000fd5b505050505050505050505050565b6008546001600160a01b031633146111a95760405162461bcd60e51b81526004016105689061205e565b600880546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031681565b6111e26119bd565b6111eb84610ed5565b60008581526005602090815260408083206001600160a01b0387168452909152902080549192509061121d90856117a9565b8155815161124b9064e8d4a510009061123790879061160a565b8161123e57fe5b6001840154919004611826565b81600101819055506112833330866004898154811061126657fe5b6000918252602090912001546001600160a01b031692919061186c565b826001600160a01b031685336001600160a01b03167f02d7e648dd130fc184d383e55bb126ac4c9c60e8f94bf05acdf557ba2d540b4787604051610782919061212f565b60056020908152600092835260408084209091529082529020805460019091015482565b6002546001600160a01b031681565b6113026119bd565b61130b84610ed5565b6000858152600560209081526040808320338452909152812082518154939450909264e8d4a510009161133e919061160a565b8161134557fe5b049050600061136461098984600101548461164d90919063ffffffff16565b905061139664e8d4a5100061138686600001518961160a90919063ffffffff16565b8161138d57fe5b8491900461164d565b600184015582546113a79087611693565b83556002546113c0906001600160a01b031686836116bb565b6113d2858760048a8154811061072257fe5b846001600160a01b031687336001600160a01b03167f8166bf25f8a2b7ed3c85049207da4358d16edbed977d23fa2ee6f0dde3ec213289604051611416919061212f565b60405180910390a486336001600160a01b03167f71bab65ced2e5750775a0613be067df48ef06cf92a496ebf7663ae066092495483604051611458919061212f565b60405180910390a350505050505050565b6060808367ffffffffffffffff8111801561148357600080fd5b506040519080825280602002602001820160405280156114ad578160200160208202803683370190505b5091508367ffffffffffffffff811180156114c757600080fd5b506040519080825280602002602001820160405280156114fb57816020015b60608152602001906001900390816114e65790505b50905060005b848110156115f257600060603088888581811061151a57fe5b905060200281019061152c919061215c565b60405161153a929190611cd0565b600060405180830381855af49150503d8060008114611575576040519150601f19603f3d011682016040523d82523d6000602084013e61157a565b606091505b50915091508180611589575085155b6115928261195d565b906115b05760405162461bcd60e51b81526004016105689190611e28565b50818584815181106115be57fe5b602002602001019015159081151581525050808484815181106115dd57fe5b60209081029190910101525050600101611501565b50935093915050565b6001546001600160a01b031681565b60008261161957506000611647565b8282028284828161162657fe5b04146116445760405162461bcd60e51b815260040161056890611fb3565b90505b92915050565b60008183038183128015906116625750838113155b80611677575060008312801561167757508381135b6116445760405162461bcd60e51b815260040161056890612095565b6000828211156116b55760405162461bcd60e51b815260040161056890611f45565b50900390565b60006060846001600160a01b031663a9059cbb85856040516024016116e1929190611d75565b6040516020818303038152906040529060e01b6020820180516001600160e01b03838183161783525050505060405161171a9190611ce0565b6000604051808303816000865af19150503d8060008114611757576040519150601f19603f3d011682016040523d82523d6000602084013e61175c565b606091505b50915091508180156117865750805115806117865750808060200190518101906117869190611ab9565b6117a25760405162461bcd60e51b815260040161056890611e67565b5050505050565b6000828201838110156116445760405162461bcd60e51b815260040161056890611e9e565b6000808212156117f05760405162461bcd60e51b815260040161056890611e42565b5090565b60008082116118155760405162461bcd60e51b815260040161056890611f7c565b81838161181e57fe5b049392505050565b600082820181831280159061183b5750838112155b80611850575060008312801561185057508381125b6116445760405162461bcd60e51b815260040161056890611ed5565b60006060856001600160a01b03166323b872dd86868660405160240161189493929190611d10565b6040516020818303038152906040529060e01b6020820180516001600160e01b0383818316178352505050506040516118cd9190611ce0565b6000604051808303816000865af19150503d806000811461190a576040519150601f19603f3d011682016040523d82523d6000602084013e61190f565b606091505b50915091508180156119395750805115806119395750808060200190518101906119399190611ab9565b6119555760405162461bcd60e51b8152600401610568906120d9565b505050505050565b60606044825110156119a3575060408051808201909152601d81527f5472616e73616374696f6e2072657665727465642073696c656e746c7900000060208201526110bb565b600482019150818060200190518101906116479190611b5c565b60405180606001604052806000815260200160008152602001600081525090565b6000602082840312156119ef578081fd5b8135611644816121d8565b600080600060608486031215611a0e578182fd5b8335611a19816121d8565b92506020840135611a29816121f0565b91506040840135611a39816121f0565b809150509250925092565b600080600060408486031215611a58578283fd5b833567ffffffffffffffff80821115611a6f578485fd5b818601915086601f830112611a82578485fd5b813581811115611a90578586fd5b8760208083028501011115611aa3578586fd5b60209283019550935050840135611a39816121f0565b600060208284031215611aca578081fd5b8151611644816121f0565b600080600080600080600080610100898b031215611af1578384fd5b8835611afc816121d8565b97506020890135611b0c816121d8565b96506040890135611b1c816121d8565b9550606089013594506080890135935060a089013560ff81168114611b3f578384fd5b979a969950949793969295929450505060c08201359160e0013590565b600060208284031215611b6d578081fd5b815167ffffffffffffffff80821115611b84578283fd5b818401915084601f830112611b97578283fd5b815181811115611ba5578384fd5b604051601f8201601f191681016020018381118282101715611bc5578586fd5b604052818152838201602001871015611bdc578485fd5b611bed8260208301602087016121a8565b9695505050505050565b600060208284031215611c08578081fd5b5035919050565b600060208284031215611c20578081fd5b5051919050565b60008060408385031215611c39578182fd5b823591506020830135611c4b816121d8565b809150509250929050565b60008060408385031215611c68578182fd5b50508035926020909101359150565b600080600060608486031215611c8b578283fd5b83359250602084013591506040840135611a39816121d8565b60008151808452611cbc8160208601602086016121a8565b601f01601f19169290920160200192915050565b6000828483379101908152919050565b60008251611cf28184602087016121a8565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0397881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b6001600160a01b03929092168252602082015260400190565b604080825283519082018190526000906020906060840190828701845b82811015611dc9578151151584529284019290840190600101611dab565b50505083810382850152808551611de0818461212f565b91508192508381028201848801865b83811015611e19578583038552611e07838351611ca4565b94870194925090860190600101611def565b50909998505050505050505050565b600060208252611e3b6020830184611ca4565b9392505050565b6020808252600b908201526a0496e7465676572203c20360ac1b604082015260600190565b6020808252601c908201527f426f72696e6745524332303a205472616e73666572206661696c656400000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526021908201527f5369676e6564536166654d6174683a206164646974696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252601590820152744f776e61626c653a207a65726f206164647265737360581b604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c657220213d2070656e64696e67206f776e6572604082015260600190565b60208082526018908201527f736574466565416464726573733a20464f5242494444454e0000000000000000604082015260600190565b60208082526024908201527f5369676e6564536166654d6174683a207375627472616374696f6e206f766572604082015263666c6f7760e01b606082015260800190565b6020808252818101527f426f72696e6745524332303a205472616e7366657246726f6d206661696c6564604082015260600190565b81518152602080830151908201526040918201519181019190915260600190565b90815260200190565b918252602082015260400190565b9283526020830191909152604082015260600190565b6000808335601e19843603018112612172578283fd5b83018035915067ffffffffffffffff82111561218c578283fd5b6020019150368190038213156121a157600080fd5b9250929050565b60005b838110156121c35781810151838201526020016121ab565b838111156121d2576000848401525b50505050565b6001600160a01b03811681146121ed57600080fd5b50565b80151581146121ed57600080fdfea2646970667358221220a41daa71ed91190260223f2501fe189ca5e83461c88e49e5b5ddbb15cd3e770f64736f6c634300060c0033"
)

// Test_compareBalanceOK tests compare func for getBalance method
// It expects no error since results are same
func Test_compareBalanceOK(t *testing.T) {
	bigRes, _ := new(big.Int).SetString("1", 16)
	data := &OutData{
		Method: "eth_getBalance",
		Recorded: &RecordedData{
			Result: []byte(hexOne),
		},
		StateDB: &StateDBData{
			Result: bigRes,
		},
	}

	err := compareBalance(data, nil)
	if err != nil {
		t.Errorf("error must be nil; err: %v", err)
	}

}

// Test_compareBalanceErrorNoMatchingResult tests compare func for getBalance method
// It expects an error of no matching results since results are different
func Test_compareBalanceErrorNoMatchingResult(t *testing.T) {
	bigRes, _ := new(big.Int).SetString("1", 16)
	data := &OutData{
		Method: "eth_getBalance",
		Recorded: &RecordedData{
			Result: []byte(hexZero),
		},
		StateDB: &StateDBData{
			Result: bigRes,
		},
	}

	err := compareBalance(data, nil)
	if err == nil {
		t.Errorf("error must not be nil; err: %v", err)
		return
	}

	if err.typ != noMatchingResult {
		t.Errorf("error must be type 'noMatchingResult'; err: %v", err)
	}

}

// Test_compareTransactionCountOK tests compare func for getTransactionCount method
// It expects no error since results are same
func Test_compareTransactionCountOK(t *testing.T) {

	data := &OutData{
		Method: "eth_getTransactionCount",
		Recorded: &RecordedData{
			Result: []byte(hexOne),
		},
		StateDB: &StateDBData{
			Result: uint64(1),
		},
	}

	err := compareTransactionCount(data, nil)

	if err != nil {
		t.Errorf("error must be nil; err: %v", err)
	}

}

// Test_compareTransactionCountErrorNoMatchingResult tests compare func for getTransactionCount method
// It expects an error of no matching results since results are different
func Test_compareTransactionCountErrorNoMatchingResult(t *testing.T) {
	data := &OutData{
		Method: "eth_getTransactionCount",
		Recorded: &RecordedData{
			Result: []byte(hexZero),
		},
		StateDB: &StateDBData{
			Result: uint64(1),
		},
	}

	err := compareTransactionCount(data, nil)
	if err == nil {
		t.Errorf("error must not be nil; err: %v", err)
		return
	}

	if err.typ != noMatchingResult {
		t.Errorf("error must be type 'noMatchingResult'; err: %v", err)
	}

}

// Test_compareCallOK tests compare func for call method
// It expects no error since results are same
func Test_compareCallOK(t *testing.T) {

	rec, _ := json.Marshal(strings.TrimPrefix(longHexOne, "0x"))
	data := &OutData{
		Method: "eth_call",
		Recorded: &RecordedData{
			Result: rec,
		},
		StateDB: &StateDBData{
			Result: hexutils.HexToBytes(strings.TrimPrefix(longHexOne, "0x")),
		},
	}

	err := compareCall(data, nil)
	if err != nil {
		t.Errorf("error must be nil; err: %v", err)
	}
}

// Test_compareCallErrorNoMatchingResult tests compare func for call method
// It expects an error of no matching results since results are different
func Test_compareCallErrorNoMatchingResult(t *testing.T) {
	rec, _ := json.Marshal(longHexOne)
	data := &OutData{
		Method: "eth_call",
		Recorded: &RecordedData{
			Result: rec,
		},
		StateDB: &StateDBData{
			Result: hexutils.HexToBytes(strings.TrimPrefix(longHexZero, "0x")),
		},
	}

	err := compareCall(data, nil)
	if err == nil {
		t.Errorf("error must not be nil; err: %v", err)
		return
	}

	if err.typ != noMatchingResult {
		t.Errorf("error must be type 'noMatchingResult'; err: %v", err)
	}

}

// Test_compareCallErrorExpectedResultGotErr tests compare func for call method
// It expects an error of "expected valid result, got error" since recorded data is a valid result but EVM returns error
func Test_compareCallErrorExpectedResultGotErr(t *testing.T) {
	data := &OutData{
		Method: "eth_call",
		Recorded: &RecordedData{
			Result: []byte(hexOne),
		},
		StateDB: &StateDBData{
			Error: errors.New("error"),
		},
	}

	err := compareCall(data, nil)
	if err == nil {
		t.Errorf("error must not be nil; err: %v", err)
		return
	}

	if err.typ != expectedResultGotError {
		t.Errorf("error must be type 'expectedResultGotError'; err: %v", err)
	}

}

// Test_compareCallErrorExpectedErrGotResult tests compare func for call method
// It expects an error of "expected error, got valid result" since recorded data is an error but EVM returns valid result
func Test_compareCallErrorExpectedErrGotResult(t *testing.T) {
	data := &OutData{
		Method: "eth_call",
		Recorded: &RecordedData{
			Error: &iterator.ErrorMessage{
				Code:    -32000,
				Message: "error",
			},
		},
		StateDB: &StateDBData{
			Result: hexutils.HexToBytes(strings.TrimPrefix(longHexZero, "0x")),
		},
	}

	err := compareCall(data, nil)
	if err == nil {
		t.Errorf("error must not be null")
		return
	}

	if err.typ != expectedErrorGotResult {
		t.Errorf("error must be type 'expectedErrorGotResult'; err: %v", err)
	}

}

// Test_compareEstimateGasOK tests compare func for estimateGas method
// It expects no error since results are same
func Test_compareEstimateGasOK(t *testing.T) {
	data := &OutData{
		Method: "eth_getTransactionCount",
		Recorded: &RecordedData{
			Result: []byte(hexOne),
		},
		StateDB: &StateDBData{
			Result: hexutil.Uint64(1),
		},
	}

	err := compareEstimateGas(data, nil)
	if err != nil {
		t.Errorf("error must be nil; err: %v", err)
	}
}

// Test_compareEstimateGasErrorNoMatchingResult tests compare func for estimateGas method
// It expects an error of no matching results since results are different
func Test_compareEstimateGasErrorNoMatchingResult(t *testing.T) {
	data := &OutData{
		Method: "eth_estimateGas",
		Recorded: &RecordedData{
			Result: []byte(hexOne),
		},
		StateDB: &StateDBData{
			Result: hexutil.Uint64(0),
		},
	}

	err := compareEstimateGas(data, nil)
	if err == nil {
		t.Errorf("error must not be null")
		return
	}

	if err.typ != noMatchingResult {
		t.Errorf("error must be type 'noMatchingResult'; err: %v", err)
	}

}

// Test_compareEstimateGasErrorExpectedResultGotErr tests compare func for estimateGas method
// It expects an error of "expected valid result, got error" since recorded data is a valid result but EVM returns error
func Test_compareEstimateGasErrorExpectedResultGotErr(t *testing.T) {
	data := &OutData{
		Method: "eth_estimateGas",
		Recorded: &RecordedData{
			Result: []byte(hexOne),
		},
		StateDB: &StateDBData{
			Error: errors.New("error"),
		},
	}

	err := compareEstimateGas(data, nil)
	if err == nil {
		t.Errorf("error must be nil; err: %v", err)
		return
	}

	if err.typ != expectedResultGotError {
		t.Errorf("error must be type 'expectedResultGotError'; err: %v", err)
	}
}

// Test_compareEstimateGasErrorExpectedErrGotResult tests compare func for estimateGas method
// It expects an error of "expected error, got valid result" since recorded data is an error but EVM returns valid result
func Test_compareEstimateGasErrorExpectedErrGotResult(t *testing.T) {
	data := &OutData{
		Method: "eth_estimateGas",
		Recorded: &RecordedData{
			Error: &iterator.ErrorMessage{
				Code:    1000,
				Message: "error",
			},
		},
		StateDB: &StateDBData{
			Result: hexutil.Uint64(0),
		},
	}

	err := compareEstimateGas(data, nil)
	if err == nil {
		t.Errorf("error must not be null")
		return
	}

	if err.typ != expectedErrorGotResult {
		t.Errorf("error must be type 'expectedErrorGotResult'; err: %v", err)
	}

}
