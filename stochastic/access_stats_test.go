package stochastic

import (
	"encoding/json"
	"testing"
)

// TestAccessStatsSimple tests for classifying values based on previous updates
func TestAccessStatsSimple(t *testing.T) {
	// create index accessStat
	accessStat := NewAccessStats[int]()

	const offset = 10
	// place elements into the queue and ensure it overfills
	for i := 0; i < qstatsLen+offset; i++ {
		accessStat.Place(i)
	}

	// check previous element's class
	class := accessStat.Classify(qstatsLen + offset - 1)
	if class != previousValueID {
		t.Fatalf("wrong classification (previous item)")
	}

	// check recent element's class (ones that should be in the queue)
	for i := offset; i < qstatsLen+offset-1; i++ {
		class := accessStat.Classify(i)
		if class != recentValueID {
			t.Fatalf("wrong classification %v (recent data)", i)
		}
	}

	// check class of elements that fell out of the queue
	for i := 1; i < offset; i++ {
		class := accessStat.Classify(i)
		if class != randomValueID {
			t.Fatalf("wrong classification %v (random data)", i)
		}
	}

	// check class of new elements
	class = accessStat.Classify(qstatsLen + offset)
	if class != newValueID {
		t.Fatalf("wrong classification (new data)")
	}

	// check class of new elements
	class = accessStat.Classify(0)
	if class != zeroValueID {
		t.Fatalf("wrong classification (new data)")
	}
}

// TestAccessStatsDistribution tests for JSON output
func TestAccessStatsDistribution(t *testing.T) {
	// create index accessStat
	accessStat := NewAccessStats[int]()

	// place first element
	for i := 0; i < 512; i++ {
		accessStat.Place(i)
		accessStat.Classify(i - 10)
	}

	// produce distribution in JSON format
	jOut, err := json.Marshal(accessStat.NewAccessStatsJSON())
	if err != nil {
		t.Fatalf("Marshalling failed to produce distribution")
	}
	expected := `{"CountingStats":{"n":511,"ecdf":[[0,0],[0.0009784735812133072,0.0019569471624266144],[0.25146771037182,0.25244618395303325],[0.5,0.5009784735812133],[0.5019569471624267,0.5029354207436398],[0.5078277886497065,0.5088062622309197],[0.5097847358121331,0.5107632093933463],[0.5156555772994129,0.5166340508806262],[0.5176125244618396,0.5185909980430528],[0.5234833659491194,0.5244618395303327],[0.525440313111546,0.5264187866927592],[0.5313111545988258,0.5322896281800391],[0.5332681017612525,0.5342465753424657],[0.5391389432485323,0.5401174168297456],[0.541095890410959,0.5420743639921721],[0.550880626223092,0.5518590998043053],[0.5567514677103719,0.557729941291585],[0.5626223091976517,0.5636007827788649],[0.5645792563600783,0.5655577299412915],[0.5704500978473581,0.5714285714285714],[0.5724070450097848,0.573385518590998],[0.5821917808219178,0.5831702544031311],[0.5880626223091977,0.5890410958904109],[0.5939334637964775,0.5949119373776908],[0.5958904109589042,0.5968688845401173],[0.601761252446184,0.6027397260273972],[0.6037181996086106,0.6046966731898238],[0.6135029354207436,0.6144814090019569],[0.6193737769080235,0.6203522504892367],[0.6252446183953033,0.6262230919765166],[0.62720156555773,0.6281800391389432],[0.636986301369863,0.6379647749510763],[0.6428571428571429,0.6438356164383561],[0.6448140900195695,0.6457925636007827],[0.6506849315068494,0.6516634050880625],[0.6526418786692759,0.6536203522504892],[0.6585127201565558,0.659491193737769],[0.6604696673189824,0.6614481409001957],[0.6663405088062623,0.6673189823874754],[0.6682974559686888,0.6692759295499021],[0.6741682974559687,0.6751467710371819],[0.6761252446183953,0.6771037181996086],[0.6819960861056752,0.6829745596868884],[0.687866927592955,0.6888454011741683],[0.6976516634050881,0.6986301369863013],[0.7035225048923679,0.7045009784735812],[0.7054794520547946,0.7064579256360077],[0.7113502935420744,0.7123287671232876],[0.713307240704501,0.7142857142857142],[0.723091976516634,0.7240704500978473],[0.7289628180039139,0.7299412915851271],[0.7309197651663405,0.7318982387475538],[0.7367906066536204,0.7377690802348336],[0.738747553816047,0.7397260273972602],[0.7446183953033269,0.74559686888454],[0.7465753424657534,0.7475538160469667],[0.7544031311154599,0.7553816046966731],[0.7602739726027398,0.7612524461839529],[0.7700587084148728,0.7710371819960861],[0.7759295499021527,0.7769080234833659],[0.7818003913894325,0.7827788649706457],[0.7915851272015656,0.7925636007827788],[0.7935420743639922,0.7945205479452054],[0.799412915851272,0.8003913894324852],[0.8052837573385518,0.8062622309197651],[0.8072407045009785,0.8082191780821917],[0.8131115459882583,0.8140900195694716],[0.815068493150685,0.8160469667318981],[0.824853228962818,0.8258317025440313],[0.8307240704500979,0.831702544031311],[0.8365949119373777,0.837573385518591],[0.8385518590998043,0.8395303326810175],[0.8483365949119374,0.8493150684931506],[0.8542074363992173,0.8551859099804304],[0.8561643835616438,0.8571428571428571],[0.8620352250489237,0.8630136986301369],[0.8679060665362035,0.8688845401174168],[0.8698630136986302,0.8708414872798433],[0.8796477495107632,0.8806262230919765],[0.8855185909980431,0.8864970645792563],[0.8953033268101761,0.8962818003913894],[0.901174168297456,0.9021526418786692],[0.9031311154598826,0.9041095890410958],[0.9090019569471625,0.9099804305283756],[0.9148727984344422,0.9158512720156555],[0.9168297455968689,0.9178082191780821],[0.9266144814090019,0.9275929549902152],[0.9324853228962818,0.933463796477495],[0.9344422700587084,0.9354207436399217],[0.9403131115459883,0.9412915851272015],[0.9500978473581213,0.9510763209393346],[0.9559686888454012,0.9569471624266144],[0.9579256360078278,0.958904109589041],[0.9637964774951077,0.9647749510763208],[0.9696673189823874,0.9706457925636007],[0.9716242661448141,0.9726027397260273],[0.9814090019569471,0.9823874755381604],[0.987279843444227,0.9882583170254402],[0.9990215264187867,1],[1,1]]},"QueuingStats":{"distribution":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}`

	if string(jOut) != expected {
		t.Fatalf("produced wrong JSON output %v", string(jOut))
	}
}
