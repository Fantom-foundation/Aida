package stochastic

import (
	"encoding/json"
	"testing"
)

// TestAccessStatsSimple tests for classifying values based on previous updates
func TestAccessStatsSimple(t *testing.T) {
	// create index accessStat
	accessStat := NewAccessStats[int]()

	// place elements into the queue and ensure it overfills
	for i := 0; i < 300; i++ {
		accessStat.Put(i)
	}

	// check previous element's class
	class := accessStat.Classify(299)
	if class != previousEntry {
		t.Fatalf("wrong classification (previous item)")
	}

	// check recent elements's class (ones placed in the queue)
	for i := 300 - 256; i < 299; i++ {
		class := accessStat.Classify(i)
		if class != recentEntry {
			t.Fatalf("wrong classification (recent data)")
		}
	}

	// check class of elements that fell out of the queue
	for i := 0; i < 300-256; i++ {
		class := accessStat.Classify(i)
		if class != randomEntry {
			t.Fatalf("wrong classification (random data)")
		}
	}

	// check class of new elements
	class = accessStat.Classify(512)
	if class != newEntry {
		t.Fatalf("wrong classification (new data)")
	}
}

// TestAccessStatsDistribution tests for JSON output
func TestAccessStatsDistribution(t *testing.T) {
	// create index accessStat
	accessStat := NewAccessStats[int]()

	// place first element
	for i := 0; i < 512; i++ {
		accessStat.Put(i)
		accessStat.Classify(i - 10)
	}

	// produce distribution in JSON format
	jOut, err := json.Marshal(accessStat.ProduceDistribution())
	if err != nil {
		t.Fatalf("Marshalling failed to produce distribution")
	}
	expected := `{"Distribution":{"NumData":512,"TotalFreq":512,"X":[0,0.0009765625,0.0107421875,0.0205078125,0.0302734375,0.0400390625,0.0498046875,0.0595703125,0.0693359375,0.0791015625,0.0888671875,0.0986328125,0.1083984375,0.1181640625,0.1279296875,0.1376953125,0.1474609375,0.1572265625,0.1669921875,0.1767578125,0.1865234375,0.1962890625,0.2060546875,0.2158203125,0.2255859375,0.2353515625,0.2451171875,0.2548828125,0.2646484375,0.2744140625,0.2841796875,0.2939453125,0.3037109375,0.3134765625,0.3232421875,0.3330078125,0.3427734375,0.3525390625,0.3623046875,0.3720703125,0.3818359375,0.3916015625,0.4013671875,0.4111328125,0.4208984375,0.4306640625,0.4404296875,0.4501953125,0.4599609375,0.4697265625,0.4794921875,0.4892578125,0.4990234375,0.5087890625,0.5185546875,0.5283203125,0.5380859375,0.5478515625,0.5576171875,0.5673828125,0.5771484375,0.5869140625,0.5966796875,0.6064453125,0.6162109375,0.6259765625,0.6357421875,0.6455078125,0.6552734375,0.6650390625,0.6748046875,0.6845703125,0.6943359375,0.7041015625,0.7138671875,0.7236328125,0.7333984375,0.7431640625,0.7529296875,0.7626953125,0.7724609375,0.7822265625,0.7919921875,0.8017578125,0.8115234375,0.8212890625,0.8310546875,0.8408203125,0.8505859375,0.8603515625,0.8701171875,0.8798828125,0.8896484375,0.8994140625,0.9091796875,0.9189453125,0.9287109375,0.9384765625,0.9482421875,0.9580078125,0.9677734375,0.9775390625,0.9873046875,0.9970703125,1],"P":[0,0.001953125,0.00390625,0.005859375,0.0078125,0.009765625,0.01171875,0.013671875,0.015625,0.017578125,0.01953125,0.021484375,0.0234375,0.025390625,0.02734375,0.029296875,0.03125,0.033203125,0.03515625,0.037109375,0.0390625,0.041015625,0.04296875,0.044921875,0.046875,0.048828125,0.05078125,0.052734375,0.0546875,0.056640625,0.05859375,0.060546875,0.0625,0.064453125,0.06640625,0.068359375,0.0703125,0.072265625,0.07421875,0.076171875,0.078125,0.080078125,0.08203125,0.083984375,0.0859375,0.087890625,0.08984375,0.091796875,0.09375,0.095703125,0.09765625,0.099609375,0.1015625,0.103515625,0.10546875,0.107421875,0.109375,0.111328125,0.11328125,0.115234375,0.1171875,0.119140625,0.12109375,0.123046875,0.125,0.126953125,0.12890625,0.130859375,0.1328125,0.134765625,0.13671875,0.138671875,0.140625,0.142578125,0.14453125,0.146484375,0.1484375,0.150390625,0.15234375,0.154296875,0.15625,0.158203125,0.16015625,0.162109375,0.1640625,0.166015625,0.16796875,0.169921875,0.171875,0.173828125,0.17578125,0.177734375,0.1796875,0.181640625,0.18359375,0.185546875,0.1875,0.189453125,0.19140625,0.193359375,0.1953125,0.197265625,0.19921875,0.201171875,1]},"Queue":{"TotalFinds":512,"FailingProbability":0.01953125,"PositionProbability":[0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}`
	if string(jOut) != expected {
		t.Fatalf("produced wrong JSON output %v", string(jOut))
	}
}
