// Code generated by MockGen. DO NOT EDIT.
// Source: result.go
//
// Generated by this command:
//
//	mockgen -source result.go -destination result_mocks.go -package txcontext
//

// Package txcontext is a generated GoMock package.
package txcontext

import (
	reflect "reflect"

	common "github.com/ethereum/go-ethereum/common"
	types "github.com/ethereum/go-ethereum/core/types"
	gomock "go.uber.org/mock/gomock"
)

// MockResult is a mock of Result interface.
type MockResult struct {
	ctrl     *gomock.Controller
	recorder *MockResultMockRecorder
}

// MockResultMockRecorder is the mock recorder for MockResult.
type MockResultMockRecorder struct {
	mock *MockResult
}

// NewMockResult creates a new mock instance.
func NewMockResult(ctrl *gomock.Controller) *MockResult {
	mock := &MockResult{ctrl: ctrl}
	mock.recorder = &MockResultMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResult) EXPECT() *MockResultMockRecorder {
	return m.recorder
}

// GetGasUsed mocks base method.
func (m *MockResult) GetGasUsed() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGasUsed")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetGasUsed indicates an expected call of GetGasUsed.
func (mr *MockResultMockRecorder) GetGasUsed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGasUsed", reflect.TypeOf((*MockResult)(nil).GetGasUsed))
}

// GetRawResult mocks base method.
func (m *MockResult) GetRawResult() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRawResult")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRawResult indicates an expected call of GetRawResult.
func (mr *MockResultMockRecorder) GetRawResult() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRawResult", reflect.TypeOf((*MockResult)(nil).GetRawResult))
}

// GetReceipt mocks base method.
func (m *MockResult) GetReceipt() Receipt {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReceipt")
	ret0, _ := ret[0].(Receipt)
	return ret0
}

// GetReceipt indicates an expected call of GetReceipt.
func (mr *MockResultMockRecorder) GetReceipt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReceipt", reflect.TypeOf((*MockResult)(nil).GetReceipt))
}

// MockReceipt is a mock of Receipt interface.
type MockReceipt struct {
	ctrl     *gomock.Controller
	recorder *MockReceiptMockRecorder
}

// MockReceiptMockRecorder is the mock recorder for MockReceipt.
type MockReceiptMockRecorder struct {
	mock *MockReceipt
}

// NewMockReceipt creates a new mock instance.
func NewMockReceipt(ctrl *gomock.Controller) *MockReceipt {
	mock := &MockReceipt{ctrl: ctrl}
	mock.recorder = &MockReceiptMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReceipt) EXPECT() *MockReceiptMockRecorder {
	return m.recorder
}

// Equal mocks base method.
func (m *MockReceipt) Equal(y Receipt) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", y)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal.
func (mr *MockReceiptMockRecorder) Equal(y any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockReceipt)(nil).Equal), y)
}

// GetBloom mocks base method.
func (m *MockReceipt) GetBloom() types.Bloom {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBloom")
	ret0, _ := ret[0].(types.Bloom)
	return ret0
}

// GetBloom indicates an expected call of GetBloom.
func (mr *MockReceiptMockRecorder) GetBloom() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBloom", reflect.TypeOf((*MockReceipt)(nil).GetBloom))
}

// GetContractAddress mocks base method.
func (m *MockReceipt) GetContractAddress() common.Address {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractAddress")
	ret0, _ := ret[0].(common.Address)
	return ret0
}

// GetContractAddress indicates an expected call of GetContractAddress.
func (mr *MockReceiptMockRecorder) GetContractAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractAddress", reflect.TypeOf((*MockReceipt)(nil).GetContractAddress))
}

// GetGasUsed mocks base method.
func (m *MockReceipt) GetGasUsed() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGasUsed")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetGasUsed indicates an expected call of GetGasUsed.
func (mr *MockReceiptMockRecorder) GetGasUsed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGasUsed", reflect.TypeOf((*MockReceipt)(nil).GetGasUsed))
}

// GetLogs mocks base method.
func (m *MockReceipt) GetLogs() []*types.Log {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogs")
	ret0, _ := ret[0].([]*types.Log)
	return ret0
}

// GetLogs indicates an expected call of GetLogs.
func (mr *MockReceiptMockRecorder) GetLogs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogs", reflect.TypeOf((*MockReceipt)(nil).GetLogs))
}

// GetStatus mocks base method.
func (m *MockReceipt) GetStatus() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetStatus indicates an expected call of GetStatus.
func (mr *MockReceiptMockRecorder) GetStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockReceipt)(nil).GetStatus))
}
