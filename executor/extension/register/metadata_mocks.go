// Code generated by MockGen. DO NOT EDIT.
// Source: metadata.go
//
// Generated by this command:
//
//	mockgen -source metadata.go -destination metadata_mocks.go -package register
//
// Package register is a generated GoMock package.
package register

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockEnvInfoFetcher is a mock of EnvInfoFetcher interface.
type MockEnvInfoFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockEnvInfoFetcherMockRecorder
}

// MockEnvInfoFetcherMockRecorder is the mock recorder for MockEnvInfoFetcher.
type MockEnvInfoFetcherMockRecorder struct {
	mock *MockEnvInfoFetcher
}

// NewMockEnvInfoFetcher creates a new mock instance.
func NewMockEnvInfoFetcher(ctrl *gomock.Controller) *MockEnvInfoFetcher {
	mock := &MockEnvInfoFetcher{ctrl: ctrl}
	mock.recorder = &MockEnvInfoFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnvInfoFetcher) EXPECT() *MockEnvInfoFetcherMockRecorder {
	return m.recorder
}

// FetchEnvInfo mocks base method.
func (m *MockEnvInfoFetcher) FetchEnvInfo() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchEnvInfo")
	ret0, _ := ret[0].(error)
	return ret0
}

// FetchEnvInfo indicates an expected call of FetchEnvInfo.
func (mr *MockEnvInfoFetcherMockRecorder) FetchEnvInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchEnvInfo", reflect.TypeOf((*MockEnvInfoFetcher)(nil).FetchEnvInfo))
}
