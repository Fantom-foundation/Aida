// Code generated by MockGen. DO NOT EDIT.
// Source: transaction_processor.go
//
// Generated by this command:
//
//	mockgen -source transaction_processor.go -destination transaction_processor_mocks.go -package executor
//

// Package executor is a generated GoMock package.
package executor

import (
	reflect "reflect"

	state "github.com/Fantom-foundation/Aida/state"
	txcontext "github.com/Fantom-foundation/Aida/txcontext"
	gomock "go.uber.org/mock/gomock"
)

// MockTxProcessor is a mock of TxProcessor interface.
type MockTxProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockTxProcessorMockRecorder
}

// MockTxProcessorMockRecorder is the mock recorder for MockTxProcessor.
type MockTxProcessorMockRecorder struct {
	mock *MockTxProcessor
}

// NewMockTxProcessor creates a new mock instance.
func NewMockTxProcessor(ctrl *gomock.Controller) *MockTxProcessor {
	mock := &MockTxProcessor{ctrl: ctrl}
	mock.recorder = &MockTxProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxProcessor) EXPECT() *MockTxProcessorMockRecorder {
	return m.recorder
}

// ProcessTransaction mocks base method.
func (m *MockTxProcessor) ProcessTransaction(db state.VmStateDB, block, tx int, st txcontext.TxContext) (txcontext.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessTransaction", db, block, tx, st)
	ret0, _ := ret[0].(txcontext.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessTransaction indicates an expected call of ProcessTransaction.
func (mr *MockTxProcessorMockRecorder) ProcessTransaction(db, block, tx, st any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessTransaction", reflect.TypeOf((*MockTxProcessor)(nil).ProcessTransaction), db, block, tx, st)
}
