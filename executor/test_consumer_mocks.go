// Code generated by MockGen. DO NOT EDIT.
// Source: test_consumer.go
//
// Generated by this command:
//
//	mockgen -source test_consumer.go -destination test_consumer_mocks.go -package executor
//
// Package executor is a generated GoMock package.
package executor

import (
	reflect "reflect"

	operation "github.com/Fantom-foundation/Aida/tracer/operation"
	gomock "go.uber.org/mock/gomock"
)

// MockOperationConsumer is a mock of OperationConsumer interface.
type MockOperationConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockOperationConsumerMockRecorder
}

// MockOperationConsumerMockRecorder is the mock recorder for MockOperationConsumer.
type MockOperationConsumerMockRecorder struct {
	mock *MockOperationConsumer
}

// NewMockOperationConsumer creates a new mock instance.
func NewMockOperationConsumer(ctrl *gomock.Controller) *MockOperationConsumer {
	mock := &MockOperationConsumer{ctrl: ctrl}
	mock.recorder = &MockOperationConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperationConsumer) EXPECT() *MockOperationConsumerMockRecorder {
	return m.recorder
}

// Consume mocks base method.
func (m *MockOperationConsumer) Consume(block, transaction int, operations []operation.Operation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consume", block, transaction, operations)
	ret0, _ := ret[0].(error)
	return ret0
}

// Consume indicates an expected call of Consume.
func (mr *MockOperationConsumerMockRecorder) Consume(block, transaction, operations any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockOperationConsumer)(nil).Consume), block, transaction, operations)
}
