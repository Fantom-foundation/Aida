// Code generated by MockGen. DO NOT EDIT.
// Source: operation_provider.go

// Package action_provider is a generated GoMock package.
package action_provider

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockOperationProvider is a mock of OperationProvider interface.
type MockOperationProvider struct {
	ctrl     *gomock.Controller
	recorder *MockOperationProviderMockRecorder
}

// MockOperationProviderMockRecorder is the mock recorder for MockOperationProvider.
type MockOperationProviderMockRecorder struct {
	mock *MockOperationProvider
}

// NewMockOperationProvider creates a new mock instance.
func NewMockOperationProvider(ctrl *gomock.Controller) *MockOperationProvider {
	mock := &MockOperationProvider{ctrl: ctrl}
	mock.recorder = &MockOperationProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperationProvider) EXPECT() *MockOperationProviderMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockOperationProvider) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockOperationProviderMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockOperationProvider)(nil).Close))
}

// Run mocks base method.
func (m *MockOperationProvider) Run(from, to int, consumer Consumer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", from, to, consumer)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockOperationProviderMockRecorder) Run(from, to, consumer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockOperationProvider)(nil).Run), from, to, consumer)
}
