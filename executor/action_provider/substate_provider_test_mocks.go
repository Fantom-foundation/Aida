// Code generated by MockGen. DO NOT EDIT.
// Source: substate_provider_test.go

// Package executor is a generated GoMock package.
package action_provider

import (
	reflect "reflect"

	substate "github.com/Fantom-foundation/Substate"
	gomock "go.uber.org/mock/gomock"
)

// MockTxConsumer is a mock of TxConsumer interface.
type MockTxConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockTxConsumerMockRecorder
}

// MockTxConsumerMockRecorder is the mock recorder for MockTxConsumer.
type MockTxConsumerMockRecorder struct {
	mock *MockTxConsumer
}

// NewMockTxConsumer creates a new mock instance.
func NewMockTxConsumer(ctrl *gomock.Controller) *MockTxConsumer {
	mock := &MockTxConsumer{ctrl: ctrl}
	mock.recorder = &MockTxConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxConsumer) EXPECT() *MockTxConsumerMockRecorder {
	return m.recorder
}

// Consume mocks base method.
func (m *MockTxConsumer) Consume(block, transaction int, substate *substate.Substate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consume", block, transaction, substate)
	ret0, _ := ret[0].(error)
	return ret0
}

// Consume indicates an expected call of Consume.
func (mr *MockTxConsumerMockRecorder) Consume(block, transaction, substate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockTxConsumer)(nil).Consume), block, transaction, substate)
}
